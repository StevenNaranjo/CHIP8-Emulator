# Implementation of the Memory class

class Memory():
    #This is the class that allows emulate the Chip8's memory
    def __init__(self):
        self.SIZE = 4096 # This means the 4kB
        self.MEM = [0]*self.SIZE
        self.FONT = [
            #These numbers are the fonts, well, the hex representation of it
            0xF0, 0x90, 0x90, 0x90, 0xF0, # 0
            0x20, 0x60, 0x20, 0x20, 0x70, # 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, # 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, # 3
            0x90, 0x90, 0xF0, 0x10, 0x10, # 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, # 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, # 6
            0xF0, 0x10, 0x20, 0x40, 0x40, # 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, # 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, # 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, # A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, # B
            0xF0, 0x80, 0x80, 0x80, 0xF0, # C
            0xE0, 0x90, 0x90, 0x90, 0xE0, # D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, # E
            0xF0, 0x80, 0xF0, 0x80, 0x80  # F
        ]
        self.stack = [] # Just the stack to to call subroutines/functions and return from them
        self.stackIndex = 0 #This allows me to access the stack in a more effective way
        self.VX = [0]*16 #General Porpuse Registers
        self.PC = 0x200 #Program Counter, it starts at 0x200 (512dec) because the ROMs, start being loaded from there, we'll use this one to make jumps
        self.I = 0 #Index Register

    #What methods do I need?

    #Print memory
    
    #Load FONTS
    
    #Load ROM
